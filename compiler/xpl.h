/*
**	XPL to C source language translator include file
**
**	Author: Daniel Weaver
**
**	XPL runtime definitions.  This header file defines critical data sructures
**	such as the dynamic string type and declares the functions defined in the
**	runtime.  It is used by the compiler and the code generated by the compiler.
*/

/*
**	XPL_LONG -> Should be defined as a 64-bit signed integer
**	XPL_UNSIGNED_LONG -> Should be defined as a 64-bit unsigned integer
**	XPL_ADDRESS -> Should be an unsigned integer big enough to hold an address
*/

#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
/* C99 standard */
#include <stddef.h>
#include <stdint.h>
typedef intmax_t XPL_LONG;
typedef uintmax_t XPL_UNSIGNED_LONG;
typedef uintptr_t XPL_ADDRESS;
#define __XPL_TYPEDEFS
#endif

#if !defined(__XPL_TYPEDEFS) && defined(__INTMAX_TYPE__)
/* GNUC */
typedef __INTMAX_TYPE__ XPL_LONG;
typedef __UINTMAX_TYPE__ XPL_UNSIGNED_LONG;
typedef __PTRDIFF_TYPE__ XPL_ADDRESS;
#define __XPL_TYPEDEFS
#endif

/*
**	If your machine does not support 64-bit integers or you just don't
**	know what the correct values should be then use the following.
*/
#if !defined(__XPL_TYPEDEFS)
/* A generic 32-bit implementation */
typedef long XPL_LONG;
typedef unsigned long XPL_UNSIGNED_LONG;
typedef unsigned long XPL_ADDRESS;
#endif

typedef struct __xpl_struct_string {
	int _Length;	/* length of string */
	char *_Address;	/* Address of string */
} __xpl_string;

extern __xpl_string descriptor[];
extern XPL_ADDRESS freebase, lower_bound, freepoint, freelimit, space_needed;
extern int ndescript;
extern int __xpl_colections[3];	/* Count the number of collections */

int __xpl_runtime_init(int size);
void __xpl_init_strings(void);
void __xpl_io_init(void);

void compactify(void);
int __xpl_compare(__xpl_string *left, __xpl_string *right);

int __xpl_get_byte(__xpl_string *str, int position);
int __xpl_put_byte(__xpl_string *str, int position, int value);

__xpl_string *__xpl_pool(void);
__xpl_string *__xpl_wrapper(__xpl_string *outstr, __xpl_string *str);
__xpl_string *__xpl_move_to_top(__xpl_string *outstr, __xpl_string *str);
__xpl_string *__xpl_cat(__xpl_string *outstr, __xpl_string *left, __xpl_string *right);
__xpl_string *__xpl_cat_int(__xpl_string *outstr, __xpl_string *left, XPL_LONG number);

__xpl_string *__xpl_decimal(__xpl_string *outstr, XPL_LONG number);

__xpl_string *__xpl_substr2(__xpl_string *outstr, __xpl_string *str, int pos);
__xpl_string *__xpl_substr3(__xpl_string *outstr, __xpl_string *str, int pos, int len);

/* I/O routines */
#define __XPL_FILE_MAX 32
#if defined(__xpl_FILE)
extern __xpl_FILE *__xpl_FILE_in[__XPL_FILE_MAX];
extern __xpl_FILE *__xpl_FILE_out[__XPL_FILE_MAX];
#endif
extern char __xpl_FILE_eol[__XPL_FILE_MAX];
extern int __xpl_FILE_flags[__XPL_FILE_MAX];
extern int __xpl_xerrno;	/* Set to the Unix value of errno if error in the runtime */

int __xpl_xio_get_flags(int unit);
int __xpl_xio_set_flags(int unit, int value);
int __xpl_xfopen(__xpl_string *filename, __xpl_string *mode);
int __xpl_xfclose(int unit);
int __xpl_xfdopen(int fd, __xpl_string *mode);
__xpl_string *__xpl_output(int num, __xpl_string *str);
__xpl_string *__xpl_input(__xpl_string *outstr, int num);
int __xpl_xprintf(int f, void *ref, __xpl_string *xfmt, ...);
int __xpl_xunlink(__xpl_string *file);
int __xpl_xrewind(int unit);
int __xpl_xmkstemp(__xpl_string *file, __xpl_string *mode);

/* XPL specific xerrno values */
#define __XPL_EOF -1

/* Runtime statistics.  Used for debugging */
void __xpl_info(void);

/* User level functions defined in the runtime */
__xpl_string *__xpl_c2x_string(__xpl_string *outstr, char *p);
char *__xpl_x2c_string(__xpl_string *str);
char *__c_decimal(XPL_LONG number);

/* Functions we wish to hide from the linker */
int __xpl_date(void);
int __xpl_time(void);
void __xpl_exit(int status);
void __xpl_abort(void);

/* Functions found in the XPL library */
__xpl_string *__xplrt_expand_tabs(__xpl_string *outstr, __xpl_string *str, int tabstop);
__xpl_string *__xpl_expand_tabs(__xpl_string *str, int tabstop);

__xpl_string *__xplrt_unique(__xpl_string *outstr, __xpl_string *str);
__xpl_string *__xpl_unique(__xpl_string *str);

int __xpl_read_file(int num, int rec, void *buffer, unsigned long rec_size);
int __xpl_write_file(int num, int rec, void *buffer, unsigned long rec_size);
extern XPL_ADDRESS file_record_size;	/* Max record size for builtin function FILE() */
extern int input_record_limit;	/* Max record size for the input function */

__xpl_string *__xplrt_hex(__xpl_string *outstr, XPL_LONG number);
__xpl_string *__xpl_hex(XPL_LONG number);

__xpl_string *__xpl_build_descriptor(__xpl_string *outstr, int length, void *addr);
__xpl_string *__xpl_get_charfixed(__xpl_string *outstr, int length, void *addr);
__xpl_string *__xpl_put_charfixed(int length, void *addr, __xpl_string *string);
